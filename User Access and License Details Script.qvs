Section - Main:
-----------------------------------------------------------------------------------------------------------------------------
SET ThousandSep=',';
SET DecimalSep='.';
SET MoneyThousandSep=',';
SET MoneyDecimalSep='.';
SET MoneyFormat='$#,##0.00;-$#,##0.00';
SET TimeFormat='h:mm:ss TT';
SET DateFormat='YYYY-MM-DD';
SET TimestampFormat='YYYY-MM-DD h:mm:ss[.fff] TT';
SET FirstWeekDay=6;
SET BrokenWeeks=1;
SET ReferenceDay=0;
SET FirstMonthOfYear=1;
SET CollationLocale='en-US';
SET CreateSearchIndexOnReload=1;
SET MonthNames='Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec';
SET LongMonthNames='January;February;March;April;May;June;July;August;September;October;November;December';
SET DayNames='Mon;Tue;Wed;Thu;Fri;Sat;Sun';
SET LongDayNames='Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday';
SET NumericalAbbreviation='3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:Î¼;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y';

//Set the Base Folder location where QVD's will be stored
Set vBaseFolder = 'lib://Custom_User_Access_Details_ODBC/License Management/All Server Users Details';

//Set the mapping folder where mapping files are stored
Set vMappingFolder = 'lib://Custom_User_Access_Details_ODBC/License Management/All Server Users Details/Mappings';

//Get the date in YearMonth format to store the QVD's for every month
Let vYearMonth = Date(Floor(Date(ReloadTime())),'YYYYMM');
Trace $(vYearMonth);

Let vLibPath_UserDetails = 'lib://APP_QlikSense_User_Extract/QlikSense_SecurityGroup';

/* Find the host name and according to that load the variable excel file corresponding to the
environment */

// Here replace the nodes with you actual server host names from Qlik Sense env

Let vHostName = ComputerName();
Trace 'Server Name: $(vHostName)';

IF(Wildmatch('$(vHostName)','Node1','Node2','Node3')) THEN
        LET vEnvironment = 'IntDev';
        Trace 'Qlik Sense Environment is $(vEnvironment)';

  ELSEIF(Wildmatch('$(vHostName)','Node1','Node2','Node3','Node4','Node5')) THEN

        LET vEnvironment = 'Test';
        Trace 'Qlik Sense Environment is $(vEnvironment)';

  ELSEIF(Wildmatch('$(vHostName)','Node1','Node2','Node3','Node4')) THEN

        LET vEnvironment = 'Prod';
        Trace 'Qlik Sense Environment is $(vEnvironment)';


  ELSEIF(Wildmatch('$(vHostName)','Node1','Node2','Node3','Node4')) THEN

        LET vEnvironment = 'DevConf';
        Trace 'Qlik Sense Environment is $(vEnvironment)';


 END IF


Expressions:
     
LOAD
    Variable,
    Expression
FROM [$(vMappingFolder)/Variables_Formulas.xlsx]
(ooxml, embedded labels, table is $(vEnvironment));
Let vNumberOfRows = NoOfRows('Expressions');
For vI = 0 to (vNumberOfRows - 1)
Let vVariable_Name = Peek('Variable',vI,'Expression');
Let [$(vVariable_Name)] = Peek('Expression',vI,'Expression');
Next

Drop Table Expressions;
 
 ---------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------

Section - Get User-Department Mapping

-------------------------------------------------------------------------------------------

/* Users domain in AD is mapped to short name of the domain matching with user directory from
QMC */

MapServerDomain:

Mapping 
Load * Inline [

Server,Domain
eu.merckgroup.com,DNEU
ap.merckgroup.com,DNAP
la.merckgroup.com,DNLA
na.merckgroup.com,DNNA
global.sial.com,GLOBAL
one.merckgroup.com,ONE

];

// Map the multiple departments to a particular BU
MapBUDepartment:

Mapping LOAD
    Department,
    BU
FROM [$(vMappingFolder)/Stream Submaster.xlsx]
(ooxml, embedded labels, table is [Dept_BU Mapping]);



// Fetch the user details from the AD
UserDetailsfromADTemp:

LOAD 
    "userId",
    server,
    Country,
    Department,
    Email,
    ApplyMap('MapServerDomain',server)                          AS  Domain,
    ApplyMap('MapBUDepartment',Department,'Other')              AS  BU,
    ApplyMap('MapServerDomain',server)&'\'&upper([userId])&'\'&Upper(userName)     AS UserKeyCountry
FROM [$(vLibPath_UserDetails)/LegacyDomain_User/*_licensegroup.csv]
(txt, codepage is 28591, embedded labels, delimiter is ',', msq);


JOIN 

LOAD
    "Country Code"                  AS Country,
    Latitude,
    Longitude,
    Country                         AS CountryName
    
FROM [$(vMappingFolder)/Country Details.xlsx]
(ooxml, embedded labels, table is [Country Details]);


STORE * From UserDetailsfromADTemp INTO '$(vBaseFolder)/$(vQVD)/$(vEnvironment)/Country-Dept_Details.qvd' (qvd);

Drop Table UserDetailsfromADTemp;


--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

Section - Get Streams Details

--------------------------------------------------------------------------------------------------------------

// Connection is mentioned under Expression table and varies env to env.

LIB CONNECT TO '$(vStream_overview)';

RestConnectorMasterTable:
SQL SELECT 
	"id" AS "id_u2",
	"createdDate" AS "createdDate_u0",
	"modifiedDate" AS "modifiedDate_u0",
	"modifiedByUserName" AS "modifiedByUserName_u0",
	"name" AS "name_u1",
	"privileges" AS "privileges_u1",
	"schemaPath" AS "schemaPath_u0",
	"__KEY_root",
	(SELECT 
		"id" AS "id_u0",
		"createdDate",
		"modifiedDate",
		"modifiedByUserName",
		"value",
		"schemaPath",
		"__KEY_customProperties",
		"__FK_customProperties",
		(SELECT 
			"id",
			"name",
			"valueType",
			"privileges",
			"__KEY_definition",
			"__FK_definition",
			(SELECT 
				"@Value",
				"__FK_choiceValues"
			FROM "choiceValues" FK "__FK_choiceValues" ArrayValueAlias "@Value")
		FROM "definition" PK "__KEY_definition" FK "__FK_definition")
	FROM "customProperties" PK "__KEY_customProperties" FK "__FK_customProperties"),
	(SELECT 
		"id" AS "id_u1",
		"userId",
		"userDirectory",
		"userDirectoryConnectorName",
		"name" AS "name_u0",
		"privileges" AS "privileges_u0",
		"__FK_owner"
	FROM "owner" FK "__FK_owner"),
	(SELECT 
		"@Value" AS "@Value_u0",
		"__FK_tags"
	FROM "tags" FK "__FK_tags" ArrayValueAlias "@Value_u0")
FROM JSON (wrap on) "root" PK "__KEY_root";

// Get the Stream names and the AD groups from the stream custom properties

[StreamADGroups Mapping]:

LOAD

	[name_u1]                                   AS  [Stream Name],
    [id_u2]                                     AS  [Stream ID],
    [__KEY_root]                                AS  [__KEY_root_3]
    
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);

LEFT JOIN([StreamADGroups Mapping])

LOAD	
    
	[value]                                     AS  [StreamADGroups],
	[__FK_customProperties]                     AS  [__KEY_root_3]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_customProperties]) ;



DROP Field [__KEY_root_3] from [StreamADGroups Mapping];

STORE [StreamADGroups Mapping] INTO '$(vBaseFolder)/$(vQVD)/$(vEnvironment)/StreamADGroups Mapping.qvd' (qvd);




DROP TABLE RestConnectorMasterTable;
DROP TABLE [StreamADGroups Mapping];


------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------

Section - Get Professional License Details

------------------------------------------------------------------------------------------------------

// Connection is mentioned under Expression table and varies env to env.

LIB CONNECT TO '$(vLicense_license_professional)';


RestConnectorMasterTable:
SQL SELECT 
	"id" AS "id_u0",
	"createdDate",
	"modifiedDate",
	"modifiedByUserName",
	"lastUsed",
	"excess",
	"quarantined",
	"quarantineEnd",
	"deletedUserId",
	"deletedUserDirectory",
	"privileges" AS "privileges_u0",
	"schemaPath",
	"__KEY_root",
	(SELECT 
		"id",
		"userId",
		"userDirectory",
		"userDirectoryConnectorName",
		"name",
		"privileges",
		"__FK_user"
	FROM "user" FK "__FK_user")
FROM JSON (wrap on) "root" PK "__KEY_root";


//Extract the prof license details and prepare the data

[Professional_License]:

LOAD	
	[userDirectory]&'\'&Upper([userId])         AS UserKey,
    [name]                                      AS [UserNameLicense],
    'Professional'                              AS [LicenseAllocatedInQMC],
    '$(vYearMonth)'                             AS [YearMonth],
	[__FK_user] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_user]);

LEFT JOIN(Professional_License) 

LOAD	
    Date(Floor([lastUsed]),'YYYY-MM-DD')        AS  [LastUsed],
	
	[__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);


STORE Professional_License INTO '$(vBaseFolder)/$(vQVD)/$(vEnvironment)/Professional_License_$(vYearMonth).qvd' (qvd);




DROP TABLE RestConnectorMasterTable;
DROP TABLE Professional_License;


----------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------

Section - Get Analyzer License Details

---------------------------------------------------------------------------------------------------------

// Connection is mentioned under Expression table and varies env to env.

LIB CONNECT TO '$(vLicense_license_analyzer)';

RestConnectorMasterTable:
SQL SELECT 
	"id" AS "id_u0",
	"createdDate",
	"modifiedDate",
	"modifiedByUserName",
	"lastUsed",
	"excess",
	"quarantined",
	"quarantineEnd",
	"deletedUserId",
	"deletedUserDirectory",
	"privileges" AS "privileges_u0",
	"schemaPath",
	"__KEY_root",
	(SELECT 
		"id",
		"userId",
		"userDirectory",
		"userDirectoryConnectorName",
		"name",
		"privileges",
		"__FK_user"
	FROM "user" FK "__FK_user")
FROM JSON (wrap on) "root" PK "__KEY_root";


//Extract the prof license details and prepare the data

[Analyzer_License]:

LOAD	
	[userDirectory]&'\'&Upper([userId])         AS UserKey,
    [name]                                      AS [UserNameLicense],
    'Analyzer'                                  AS [LicenseAllocatedInQMC],
    '$(vYearMonth)'                             AS [YearMonth],
	[__FK_user] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_user]);

LEFT JOIN(Analyzer_License) 

LOAD	
    Date(Floor([lastUsed]),'YYYY-MM-DD')        AS  [LastUsed],
	
	[__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);


STORE Analyzer_License INTO '$(vBaseFolder)/$(vQVD)/$(vEnvironment)/Analyzer_License_$(vYearMonth).qvd' (qvd);




DROP TABLE RestConnectorMasterTable;
DROP TABLE Analyzer_License;


-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------

Section - Prepare License Details

-------------------------------------------------------------------------------------------------------------

// Concatenate all the QVD's generated from Prof and Anlz license extracted over a period of time


License_Allocated:

LOAD
    
    UserKey,
    UserNameLicense,
    LicenseAllocatedInQMC,
    LastUsed,
    YearMonth
FROM [$(vBaseFolder)/$(vQVD)/$(vEnvironment)/Professional_License_*.qvd]
(qvd);

Concatenate(License_Allocated)

LOAD
    
    UserKey,
    UserNameLicense,
    LicenseAllocatedInQMC,
    LastUsed,
    YearMonth
FROM [$(vBaseFolder)/$(vQVD)/$(vEnvironment)/Analyzer_License_*.qvd]
(qvd);


// Preparing final QVD with Prof and Anlz license allocation data together

STORE *  from License_Allocated INTO '$(vBaseFolder)/$(vQVD)/$(vEnvironment)/License_Allocated.qvd' (qvd);

DROP TABLE License_Allocated;


----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------

Section - Get User Details

---------------------------------------------------------------------------------------------------

// Connection is mentioned under Expression table and varies env to env.

LIB CONNECT TO '$(vUser_overview)';

RestConnectorMasterTable:
SQL SELECT 
	"id" AS "id_u0",
	"createdDate" AS "createdDate_u0",
	"modifiedDate" AS "modifiedDate_u0",
	"modifiedByUserName" AS "modifiedByUserName_u0",
	"userId",
	"userDirectory",
	"userDirectoryConnectorName",
	"name",
	"inactive",
	"removedExternally",
	"blacklisted",
	"deleteProhibited",
	"privileges",
	"schemaPath" AS "schemaPath_u0",
	"__KEY_root",
	(SELECT 
		"@Value",
		"__FK_customProperties"
	FROM "customProperties" FK "__FK_customProperties" ArrayValueAlias "@Value"),
	(SELECT 
		"@Value" AS "@Value_u0",
		"__FK_roles"
	FROM "roles" FK "__FK_roles" ArrayValueAlias "@Value_u0"),
	(SELECT 
		"id",
		"createdDate",
		"modifiedDate",
		"modifiedByUserName",
		"attributeType",
		"attributeValue",
		"externalId",
		"schemaPath",
		"__FK_attributes"
	FROM "attributes" FK "__FK_attributes"),
	(SELECT 
		"@Value" AS "@Value_u1",
		"__FK_tags"
	FROM "tags" FK "__FK_tags" ArrayValueAlias "@Value_u1"),
	(SELECT 
		"@Value" AS "@Value_u2",
		"__FK_favorites"
	FROM "favorites" FK "__FK_favorites" ArrayValueAlias "@Value_u2")
FROM JSON (wrap on) "root" PK "__KEY_root";

// Fetching the users details and AD group details where user is part of.

[root]:
LOAD	
	[createdDate_u0]                          AS [User Creation Date],
	

	[userDirectory]&'\'&Upper([userId])       AS UserKey,
	
	[name]                                    AS [User Name],
	[inactive]                                AS [Inactive],
	
	[__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);

LEFT JOIN(root)

LOAD	
	[attributeType],
	[attributeValue]                          AS  [AD Group Name],
	
	[__FK_attributes] AS [__KEY_root]
RESIDENT RestConnectorMasterTable

WHERE NOT IsNull([__FK_attributes]) AND attributeType='Group' AND NOT WildMatch([attributeValue],$(vFilterAttrbute));


// Transforming the extracted table and derving the required fields from it.

Master:

Load 

    *,
    '$(vYearMonth)'                          AS  LoadYearMonth
    
Resident root;

LEFT JOIN(Master)

Load
    UserKey,
    If(WildMatch([AD Group Name],$(vProfLicense)),'Professional',
    If(WildMatch([AD Group Name],$(vAnlzLicense)),'Analyzer'))     
                                              AS  LicenseTypeBasedOnAD

Resident root where WildMatch([AD Group Name],$(vProfLicense),$(vAnlzLicense));


LEFT JOIN(Master)

Load
    UserKey,
    [AD Group Name]                                 AS  StreamADGroups

Resident root WHERE WildMatch([AD Group Name],$(vPowStream),$(vConStream));


UserDetails:

Load 
    UserKey,
    [User Name],
    Inactive,
    Date(Floor([User Creation Date]),'YYYY-MM-DD')   AS  [User Creation Date] ,
    If(Wildmatch(LicenseTypeBasedOnAD,'Professional','Analyzer'),LicenseTypeBasedOnAD,'NotInLicenseAD')   AS LicenseTypeBasedOnAD,
    StreamADGroups,
    '$(vEnvironment)'                                AS  Environement
    
Resident Master;

LEFT JOIN(UserDetails)

Load
    UserKey,
    Count(distinct LicenseTypeBasedOnAD)             AS  DuplicateLicenseADGroupCount
    
Resident UserDetails Group By UserKey;

LEFT JOIN(UserDetails)

LOAD
    "Stream Name",
   
    StreamADGroups
    
FROM [$(vBaseFolder)/$(vQVD)/$(vEnvironment)/StreamADGroups Mapping.qvd]
(qvd);



STORE * From UserDetails INTO '$(vBaseFolder)/$(vQVD)/$(vEnvironment)/UserDetails.qvd' (qvd);



DROP TABLE RestConnectorMasterTable;
DROP TABLE root;
DROP TABLE Master;
DROP TABLE UserDetails;


--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------

Section : Load all Servers Details

---------------------------------------------------------------------------------------------------

/*Concatenate all the data extracted and prepare a final table for Users details and License details
from all the env */


UserDetails:

LOAD
    StreamADGroups,
    UserKey                  AS   UserIDCreated,
//     Autonumber('DevConf'&'\'&UserKey)         AS   %UserKey,
'DevConf'&'\'&UserKey        AS   %UserKey,
    "User Name",
    Inactive,
    "User Creation Date",
    LicenseTypeBasedOnAD,
    'DevConf'                                  AS UserEnvironement,
    DuplicateLicenseADGroupCount,
    "Stream Name"
    
// FROM [lib://Custom_User_Access_Details_ODBC/License Management/All Server Users Details/QVD/DevConf/UserDetails.qvd]
// (qvd);

FROM [$(vBaseFolder)/$(vQVD)/DevConf/UserDetails.qvd]
(qvd);

Concatenate (UserDetails)

LOAD
    StreamADGroups,
    UserKey                  AS   UserIDCreated,
   // Autonumber('IntDev'&'\'&UserKey)         AS   %UserKey,
  'IntDev'&'\'&UserKey         AS   %UserKey,
    "User Name",
    Inactive,
    "User Creation Date",
    LicenseTypeBasedOnAD,
    'IntDev'                                  AS UserEnvironement,
    DuplicateLicenseADGroupCount,
    "Stream Name"
FROM [$(vBaseFolder)/$(vQVD)/IntDev/UserDetails.qvd]
(qvd);

Concatenate (UserDetails)

LOAD
    StreamADGroups,
    UserKey                  AS   UserIDCreated,
    //Autonumber('Test'&'\'&UserKey)         AS   %UserKey,
    'Test'&'\'&UserKey        AS   %UserKey,
    "User Name",
    Inactive,
    "User Creation Date",
    LicenseTypeBasedOnAD,
    'Test'                                  AS UserEnvironement,
    DuplicateLicenseADGroupCount,
    "Stream Name"
FROM [$(vBaseFolder)/$(vQVD)/Test/UserDetails.qvd]
(qvd);

Concatenate (UserDetails)

LOAD
    StreamADGroups,
    UserKey                  AS   UserIDCreated,
    //Autonumber('Prod'&'\'&UserKey)         AS   %UserKey,
   'Prod'&'\'&UserKey        AS   %UserKey,
    "User Name",
    Inactive,
    "User Creation Date",
    LicenseTypeBasedOnAD,
    'Prod'                                  AS UserEnvironement,
    DuplicateLicenseADGroupCount,
    "Stream Name"
FROM [$(vBaseFolder)/$(vQVD)/Prod/UserDetails.qvd]
(qvd);




LicenseAllocated:

LOAD
    UserNameLicense,
    UserKey              AS UserIDLicense,
    'IntDev'&'\'&UserKey         AS   %UserKey,
    LicenseAllocatedInQMC,
    'IntDev'                  AS LicenseServer,
    LastUsed,
    YearMonth
FROM [$(vBaseFolder)/$(vQVD)/IntDev/License_Allocated.qvd]
(qvd);

Concatenate (LicenseAllocated)

LOAD
    UserNameLicense,
    UserKey              AS UserIDLicense,
    'DevConf'&'\'&UserKey        AS   %UserKey,
    LicenseAllocatedInQMC,
    'DevConf'                  AS LicenseServer,
    LastUsed,
    YearMonth
FROM [$(vBaseFolder)/$(vQVD)/DevConf/License_Allocated.qvd]
(qvd);

Concatenate (LicenseAllocated)

LOAD
    UserNameLicense,
    UserKey              AS UserIDLicense,
    'Test'&'\'&UserKey        AS   %UserKey,
    LicenseAllocatedInQMC,
    'Test'                  AS LicenseServer,
    LastUsed,
    YearMonth
FROM [$(vBaseFolder)/$(vQVD)/Test/License_Allocated.qvd]
(qvd);

Concatenate (LicenseAllocated)

LOAD
    UserNameLicense,
    UserKey              AS UserIDLicense,
    'Prod'&'\'&UserKey        AS   %UserKey,
    LicenseAllocatedInQMC,
    'Prod'                  AS LicenseServer,
    LastUsed,
    YearMonth
FROM [$(vBaseFolder)/$(vQVD)/Prod/License_Allocated.qvd]
(qvd);

// LEFT JOIN(LicenseAllocated)

// LOAD 

//     %UserKey,
//     Count(Distinct LicenseAllocatedInQMC)        AS  DuplicateLicenseAllocationCount
    
// Resident LicenseAllocated Group By %UserKey;

// LEFT JOIN(LicenseAllocated)

// LOAD 

//     UserNameLicense,
//     Count(Distinct LicenseAllocatedInQMC)        AS  DuplicateLicenseDomainMigrationCount
    
// Resident LicenseAllocated Group By UserNameLicense;


------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------

Section - Calendar Subroutine

--------------------------------------------------------------------------------------------

/* Since there are multiple dates such as User Creation Date and Last Used Date,
we need to create a common calendar so that association between 2 dates is possible */

//===================================================
// Subroutine to Generate Calendar. 
//===================================================
SUB CalendarFromField(_field, _calendar, _prefix)
[$(_calendar)]:
// Generate Final Calendar
LOAD Distinct
	[$(_field)]
	,year([$(_field)]) as [$(_prefix)Year]
	,month([$(_field)]) as [$(_prefix)Month]
	,day([$(_field)]) as [$(_prefix)Day]
	,weekday([$(_field)]) as [$(_prefix)Weekday]
;
// Generate range of dates between min and max.
LOAD
	date(DateMin + IterNo()) as [$(_field)]		// Link Field
WHILE DateMin + IterNo() <= DateMax	
;
// Find min and max of date field values.
LOAD
	min(datefield)-1 as DateMin
	,max(datefield) as DateMax
;
// Load date field values.
LOAD 
	FieldValue('$(_field)', RecNo()) as datefield
AutoGenerate FieldValueCount('$(_field)');	

END SUB


-----------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------

Section - Master Calendar

---------------------------------------------------------------------------------------------

//===================================================
// Collect Fact Dates into a link table.
//===================================================
DateLink:	
LOAD 

	 %UserKey,				                                        // Fact Key,
     "User Creation Date"                         AS    Date,		// Fact Date
	'Creation'                                    AS    DateType	    // Fact Type
RESIDENT [UserDetails]				                        // from Orders
;
LOAD						                                        // Repeat for Shipments 
	 %UserKey,
	 LastUsed                                      AS   Date,
	'Usage'                                        AS   DateType
RESIDENT [LicenseAllocated]
;


// Call Calendar Generator for field "Date"
CALL CalendarFromField('Date', 'CommonCalendar', '');
CALL CalendarFromField('User Creation Date', 'CreationCalendar', 'Creation ');			// Create Calendar for OrderDate
CALL CalendarFromField('LastUsed', 'UsedCalendar', 'Usage ');			// Create Calendar for ShipDate
//CALL CalendarFromField('InvoiceDate', 'InvoiceCalendar', 'Invoice ');	// Create Calendar for InvoiceDate



-------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------

Section - Load User-Department Mapping

----------------------------------------------------------------------------------------------------------------

//Load the other required details

[BU-Department]:

LOAD
    
    Department,
    Email,
    Domain&'\'&"userId"  AS UserIDCreated,
    BU,
   
    Latitude,
    Longitude,
    CountryName


FROM [$(vBaseFolder)/$(vQVD)/$(vEnvironment)/Country-Dept_Details.qvd]
(qvd);

[Stream-Subsidiary]:

LOAD
    "Stream Name"                                        AS  [Stream Name],
    "MSmart Relevant",
    "Subsidiary ID",
    "Subsidiary Name"

FROM [$(vBaseFolder)/Mappings/Stream Submaster.xlsx]
(ooxml, embedded labels, table is [Stream Submaster]);






// Left Keep(LicenseAllocated)

// Load 

// "UserIDLicense",
// Count(LicenseAllocatedInQMC)   AS DuplicateCountByLicenseUsed

// Resident LicenseAllocated where YearMonth='202306'

// Group By "UserIDLicense";

// Left Keep(LicenseAllocated)

// Load 

// "UserNameLicense",
// Count(LicenseAllocatedInQMC)   AS DuplicateCountByDomainMigrated

// Resident LicenseAllocated where YearMonth='202306'

// Group By "UserNameLicense";


--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
 

